#include <stdio.h>
#include <stdlib.h>
#include <SDL.h>
#include <SDL_image.h>
#include <SDL_ttf.h>

#undef main

typedef struct Font{
    TTF_Font* font;
    SDL_Rect position;
    SDL_Surface* surface;
    SDL_Texture* texture;
    SDL_Color color
} Font;

SDL_Color ColorRED   = {255,255,0};
SDL_Color ColorWHITE = {100,100,100};

int ColisionClick(SDL_Rect a, SDL_MouseMotionEvent m){
    if(m.x > a.x && m.x < a.x + a.w
    && m.y > a.y && m.y < a.y + a.h){
        return 1;
    }
    return 0;
}

void ToWhite(SDL_Color c1){

}

int main(){
    SDL_Init(SDL_INIT_EVERYTHING);
    TTF_Init();

    SDL_Window*     window   = SDL_CreateWindow("Menu", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 1280, 720, SDL_WINDOW_SHOWN);
    SDL_Renderer*   renderer = SDL_CreateRenderer(window, -1, 0);
    SDL_Event       e;
    Font            FontTitle;
    Font            FontNewGame;
    Font            FontOption;
    Font            FontExit;

    FontTitle.color   = ColorRED;
    FontTitle.font    = TTF_OpenFont("font/ARCADECLASSIC.TTF", 20);
    FontTitle.surface = TTF_RenderText_Solid(FontTitle.font, "G O L D  R U S H", FontTitle.color);
    FontTitle.texture = SDL_CreateTextureFromSurface(renderer, FontTitle.surface);

    FontNewGame.color   = ColorWHITE;
    FontNewGame.font    = TTF_OpenFont("font/ARCADECLASSIC.TTF", 20);
    FontNewGame.surface = TTF_RenderText_Solid(FontNewGame.font, "New Game", FontNewGame.color);
    FontNewGame.texture = SDL_CreateTextureFromSurface(renderer, FontNewGame.surface);

    FontOption.color   = ColorWHITE;
    FontOption.font    = TTF_OpenFont("font/ARCADECLASSIC.TTF", 20);
    FontOption.surface = TTF_RenderText_Solid(FontOption.font, "Options", FontOption.color);
    FontOption.texture = SDL_CreateTextureFromSurface(renderer, FontOption.surface);

    FontExit.color   = ColorWHITE;
    FontExit.font    = TTF_OpenFont("font/ARCADECLASSIC.TTF", 20);
    FontExit.surface = TTF_RenderText_Solid(FontExit.font, "Exit", FontExit.color);
    FontExit.texture = SDL_CreateTextureFromSurface(renderer, FontExit.surface);

    FontTitle.position.x = 200;
    FontTitle.position.y = 100;
    FontTitle.position.w = 900;
    FontTitle.position.h = 200;

    FontNewGame.position.x = 200;
    FontNewGame.position.y = 200;
    FontNewGame.position.w = 500;
    FontNewGame.position.h = 200;

    FontOption.position.x = 200;
    FontOption.position.y = 300;
    FontOption.position.w = 500;
    FontOption.position.h = 200;

    FontExit.position.x = 200;
    FontExit.position.y = 400;
    FontExit.position.w = 500;
    FontExit.position.h = 200;

    while(1){
        while(SDL_PollEvent(&e)){
            switch (e.type){
            case SDL_QUIT:
                exit(0);
                break;

            case SDL_MOUSEBUTTONDOWN:
                if (ColisionClick(FontNewGame.position, e.motion)){printf("New Game\n");}
                else if (ColisionClick(FontOption.position, e.motion)){printf("Option\n");}
                else if (ColisionClick(FontExit.position, e.motion)){printf("Exit\n");}

            case SDL_MOUSEMOTION:
                if (ColisionClick(FontNewGame.position, e.motion)){

                }
                else if (ColisionClick(FontOption.position, e.motion)){
                    printf("Option\n");
                }
                else if (ColisionClick(FontExit.position, e.motion)){
                    printf("Exit\n");
                }
            }
        }

        SDL_RenderCopy(renderer, FontTitle.texture,   NULL, &FontTitle.position);
        SDL_RenderCopy(renderer, FontNewGame.texture, NULL, &FontNewGame.position);
        SDL_RenderCopy(renderer, FontOption.texture,  NULL, &FontOption.position);
        SDL_RenderCopy(renderer, FontExit.texture,    NULL, &FontExit.position);

        SDL_RenderPresent(renderer);
    }
    return 0;
}
